;; First project for "Introduction to Systematic Program Design Part 1" (jun 2013)
;; One line text editor

(require 2htdp/image)
(require 2htdp/universe)

;; editor-project-starter.rkt
;;
;; In this project you will design a simple one line text editor.  
;;
;; The screen looks like:
;; 
;;     abc|def
;;
;; where | is the cursor.
;;
;; Typing a character inserts that character before the cursor.
;; The backspace key deletes the character before the cursor.
;; The left and right arrow keys move the cursor left and right.



;; =================================================================================
;; Constants:

(define WIDTH  200)
(define HEIGHT  20)

(define TEXT-SIZE  18)
(define TEXT-COLOR "BLACK")

(define CURSOR (rectangle 1 20 "solid" "red"))

(define MTS (empty-scene WIDTH HEIGHT))



;; =================================================================================
;; Data Definitions:

(define-struct editor (txt cp))
;; Editor is (make-editor String Natural)
;; interp. the current text (txt) and cursor position (cp) using a 0-based index

(define ED1 (make-editor ""       0)) ; empty
(define ED2 (make-editor "abcdef" 0)) ; cursor at beginning as in |abcdef
(define ED3 (make-editor "abcdef" 3)) ; cursor in middle of text as in abc|def
(define ED4 (make-editor "abcdef" 6)) ; cursor at end as in abcdef|

#;
(define (fn-for-editor e)
  (... (editor-txt e)
       (editor-cp e)))

;; =================================================================================
;; Functions:

;; Editor -> Editor
;; start the world with an initial state e, for example (main (make-editor "" 0))

(define (main e)
  (big-bang e
            (to-draw    render-editor)   ; Editor -> Image
            (on-key     handle-key)))    ; Editor KeyEvent -> Editor



;; Editor -> Image
;; place text with cursor at left, middle edge of MTS
(check-expect (render-editor (make-editor "abcdef" 3))
              (overlay/align "left"
                             "middle"
                             (beside (text "abc" TEXT-SIZE TEXT-COLOR)
                                     CURSOR
                                     (text "def" TEXT-SIZE TEXT-COLOR))
                             MTS))

(check-expect (render-editor (make-editor "" 0))
              (overlay/align "left"
                             "middle"
                             (beside CURSOR
                                     (text "" TEXT-SIZE TEXT-COLOR))
                             MTS))

(check-expect (render-editor (make-editor "abcdef" 0))
              (overlay/align "left"
                             "middle"
                             (beside CURSOR
                                     (text "abcdef" TEXT-SIZE TEXT-COLOR) )
                             MTS))

(check-expect (render-editor (make-editor "abcdef" 6))
              (overlay/align "left"
                             "middle"
                             (beside (text "abcdef" TEXT-SIZE TEXT-COLOR)
                                     CURSOR)
                             MTS))

; (define (render-editor e) MTS) ;stub

; <use template from Editor>

(define (render-editor e)
  (cond [(> (editor-cp e) 0)
         (overlay/align "left"
                     "middle"
                     (beside (text (substring (editor-txt e) 0 (editor-cp e)) TEXT-SIZE TEXT-COLOR)
                              CURSOR
                              (text (substring (editor-txt e) (editor-cp e)) TEXT-SIZE TEXT-COLOR))
                     MTS)]
        [else (overlay/align "left"
                             "middle"
                             (beside CURSOR
                                     (text (editor-txt e) TEXT-SIZE TEXT-COLOR))
                             MTS)]))

;; Editor KeyEvent -> Editor
;; call appropriate function for each keyboard command

; (define (handle-key e key) e) ;stub

#;
(define (handle-key e key)
  (cond [(key=? key "left")        (... e)]
        [(key=? key "right")       (... e)]
        [(key=? key "\b")          (... e)]        
        [(= (string-length key) 1) (... e)]
        [else (... e)]))

(define (handle-key e key)
  (cond [(key=? key "left")        (cursor-left e)]     ; move CURSOR one left, but stays at 0 if editor-cp is = 0
        [(key=? key "right")       (cursor-right e)]    ; move CURSOR one right, but do not move when after the last letter of string
        [(key=? key "\b")          (backspace e)]       ; delete letter before CURSOR and move CURSOR one left       
        [(= (string-length key) 1) (insert e key)]      ; type given key and puts CURSOR right after key
        [else e]))
         

;; Editor -> Editor
;; move CURSOR one left, but stays at 0 if editor-cp is = 0
(check-expect (cursor-left (make-editor "abc" 0)) (make-editor"abc" 0))
(check-expect (cursor-left (make-editor "abc" 1)) (make-editor "abc" 0))
(check-expect (cursor-left (make-editor "abc" 3)) (make-editor "abc" 2))

; (define (cursor-left e) (make-editor " " 0)) ;stub

; <template from Editor>

(define (cursor-left e)
  (cond [(= (editor-cp e) 0)
         e]
        [else 
         (make-editor (editor-txt e) (- (editor-cp e) 1))]))
         
;; Editor -> Editor
;; move CURSOR one right, except when there is no more string after CURSOR
(check-expect (cursor-right (make-editor "abc"    3))    (make-editor "abc" 3))
(check-expect (cursor-right (make-editor "abcdef" 3)) (make-editor "abcdef" 4))
(check-expect (cursor-right (make-editor "abcd"   3))   (make-editor "abcd" 4))


; (define (cursor-right e) (make-editor " " 0)) ;stub

;<Template from Editor>

(define (cursor-right e)
  (cond [(= (string-length (editor-txt e)) (editor-cp e))
         e]
        [else 
         (make-editor (editor-txt e) (+ (editor-cp e) 1))]))
        
        
;; Editor -> Editor
;; delete one letter before CURSOR when "\b" is pressed and move CURSOR one left     
(check-expect (backspace (make-editor "abcdef" 3)) (make-editor "abdef"  2))
(check-expect (backspace (make-editor "abcdef" 6)) (make-editor "abcde"  5))
(check-expect (backspace (make-editor "abcdef" 0)) (make-editor "abcdef" 0))

; (define (backspace e) (make-editor " " 0)) ;stub

; Template from Editor

(define (backspace e)
  (cond [(= (editor-cp e) 0) 
         (make-editor (editor-txt e) (editor-cp e))]
        [else 
         (make-editor (string-append (substring (txt-before-cp e) 0 (- (editor-cp e) 1)) (txt-after-cp e)) (- (editor-cp e) 1))]))
                                        
;; Editor ->Editor
;; type the given key before editor-cp, except "enter", "tab", "new line" and "DEL"

(check-expect (insert (make-editor "abcdef"               3)  "x")       (make-editor "abcxdef" 4))
(check-expect (insert (make-editor "abcdef"               0)  "x")       (make-editor "xabcdef" 1))
(check-expect (insert (make-editor "abcdef"               6)  "x")       (make-editor "abcdefx" 7))
(check-expect (insert (make-editor "abcdef"               6)  "\r")      (make-editor "abcdef"  6))
(check-expect (insert (make-editor "abcdef"               6)  "\t")      (make-editor "abcdef"  6))
(check-expect (insert (make-editor "abcdef"               6)  "\n")      (make-editor "abcdef"  6))
(check-expect (insert (make-editor "abcdef"               3)  "\u007F")  (make-editor "abcdef"  3))
(check-expect (insert (make-editor ""                     0)  "\r")      (make-editor ""        0))

; (define (insert e ke) (make-editor " " 0)) ;stub

; Template from Editor

(define (insert e key)
  (cond [(key=? key "\n")                         e]
        [(key=? key "\t")                         e]
        [(key=? key "\r")                         e]
        [(key=? key "\u007F")                     e]
        [else 
         (make-editor (string-append (txt-before-cp e) key (txt-after-cp e)) (+ (editor-cp e) 1))]))
   

;; Editor -> String
;; defines string before editor-cp
(check-expect (txt-before-cp (make-editor "abcdef" 3)) "abc")
(check-expect (txt-before-cp (make-editor "abcdef" 0)) "")
(check-expect (txt-before-cp (make-editor "abcdef" 6)) "abcdef")
(check-expect (txt-before-cp (make-editor "" 0)) "")

; (define (txt-before-cp e) " ") ;stub

; Template from Editor

(define (txt-before-cp e)
  (cond [(<= (editor-cp e) 0) ""]
        [else 
         (substring (editor-txt e) 0 (editor-cp e))]))
       
;; Editor -> String
;; defines string after editor-cp
(check-expect (txt-after-cp (make-editor "abcdef" 3)) "def")
(check-expect (txt-after-cp (make-editor "abcdef" 0)) "abcdef") 
(check-expect (txt-after-cp (make-editor "abcdef" 6)) "")
(check-expect (txt-after-cp (make-editor " " 0)) " ")

; (define (txt-after-cp e) " ") ;stub

; Template from Editor

(define (txt-after-cp e)
  (cond [(= (editor-cp e) (string-length (editor-txt e)))
         ""]
        [else
         (substring (editor-txt e) (editor-cp e))]))


  ; Note: 
; "left" is the left arrow key, "right" is the right arrow key, and 
; "\b" is the backspace key.
