# Introduction to Interactive Programming in Python (Nov/2013)
# Made with Codeskulptor (http://www.codeskulptor.org/#user25_lFV8rv3Szo_12.py)

# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    
SPACE_CARD = 30

# my constants for draw handler
DEALER_HAND_POS = [10, 200] 
PLAYER_HAND_POS = [10, 370] 
OUTCOME_POS = [10, 130] 
OUTCOME_SIZE = 32
OUTCOME_COLOR = "White"
SCORE_POS = [500, 570] 
SCORE_SIZE = 24
SCORE_COLOR = "White"
TITLE_POS = [600 / 3, 45] 
TITLE_SIZE = 48
TITLE_COLOR = "#7FFFD4"
DEALER_POS = [10, 190]
DEALER_SIZE = 28
DEALER_COLOR = "#8FBC8F"
PLAYER_POS = [10, 360]
PLAYER_SIZE = 28
PLAYER_COLOR = "#8FBC8F"

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
busted = False # my variable to control hit and stand buttons

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
       card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                   CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
       canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        # create Hand object
        self.hand = []
        
    def __str__(self):
        # return a string representation of a hand
        base = ""
        for card in self.hand:
            base += str(card) + " "
        return "Hand contains " + base
        
    def add_card(self, card):
        # add a card object to a hand
        return self.hand.append(card)
        
    def get_value(self):
        # gets value of sum of cards in hand
        hand_value = 0
        aces = False
        for card in self.hand:
            hand_value += VALUES.get(card.get_rank())
            if card.get_rank() == 'A':
                aces = True
        if aces == True and hand_value + 10 <= 21:
            hand_value += 10
        return hand_value

    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        for card in self.hand:
            card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(card.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(card.suit))
            canvas.draw_image(card_images, card_loc, CARD_SIZE, 
                              [pos[0] + CARD_CENTER[0] + CARD_SIZE[0] * self.hand.index(card), pos[1] + CARD_CENTER[1]], CARD_SIZE)
 
# define deck class 
class Deck:
    def __init__(self):
        self.deck = []
        for suit in SUITS:
            for rank in RANKS:
                self.deck.append(Card(str(suit), str(rank)))

    def shuffle(self):
        # shuffle the deck
        return random.shuffle(self.deck)

    def deal_card(self):
        # deal a card object from the deck
        self.card = self.deck[0]
        self.deck.remove(self.card)
        return self.card
    
    def __str__(self):
        # return a string representing the deck
        base_deck = " "
        for i in self.deck:
            base_deck += str(i) + " "
        return "Deck contais " + base_deck

#define event handlers for buttons
def deal():
    #shuffles deck and adds 2 cards in dealer_hand and player_hand
    global outcome, in_play, a_deck, score
    global player_hand, dealer_hand, busted
    busted = False
    if in_play:
        score -= 1
        outcome = "Hit or stand?"
    else:
        outcome = "Hit or stand?"
    player_hand = Hand()
    dealer_hand = Hand()
    a_deck = Deck()
    a_deck.shuffle()
    player_hand.add_card(a_deck.deal_card())
    dealer_hand.add_card(a_deck.deal_card())
    player_hand.add_card(a_deck.deal_card())
    dealer_hand.add_card(a_deck.deal_card())
    in_play = True    
       
def hit():
    # if the hand is in play, hit the player
    global outcome, score, in_play, busted
    if in_play == True:
        # if busted, assign a message to outcome, update in_play and score
        player_hand.add_card(a_deck.deal_card())
        if player_hand.get_value() > 21:
            outcome = "You have busted. Dealer wins. New deal?"
            score -= 1
            busted = True
            in_play = False

def stand():
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    # assign a message to outcome, update in_play and score
    global outcome, score, in_play, busted
    
    while dealer_hand.get_value() <= 17 and busted == False:
        dealer_hand.add_card(a_deck.deal_card())
            
    if in_play == True:
        if player_hand.get_value() > 21:
            outcome = "You have busted. Dealer wins .New deal?"
            score -= 1
            busted = True
            in_play = False
        elif dealer_hand.get_value() > 21:
            outcome = "Dealer has busted. You win. New deal?"
            score += 1
            in_play = False
            busted = False
        elif dealer_hand.get_value() >= player_hand.get_value():
            outcome = "Dealer wins. New deal?"
            score -= 1
            in_play = False
            busted = False
        elif player_hand.get_value() > dealer_hand.get_value():
            outcome = "You win. New deal?"
            score += 1
            in_play = False
    
# draw handler    
def draw(canvas):
    global in_play, busted
    # test to make sure that card.draw works, replace with your code below
    dealer_hand.draw(canvas, DEALER_HAND_POS)
    player_hand.draw(canvas, PLAYER_HAND_POS)
    if in_play == True:
        canvas.draw_image(card_back, CARD_BACK_CENTER, 
                          CARD_BACK_SIZE, 
                          [DEALER_HAND_POS[0] + CARD_BACK_CENTER[0],
                           DEALER_HAND_POS[1] + CARD_BACK_CENTER[1]],
                              CARD_BACK_SIZE)
    canvas.draw_text(outcome, OUTCOME_POS, OUTCOME_SIZE,
                     OUTCOME_COLOR)
    canvas.draw_text("Blackjack", TITLE_POS, TITLE_SIZE,
                     TITLE_COLOR)
    canvas.draw_text("Dealer", DEALER_POS, DEALER_SIZE,
                     DEALER_COLOR)
    canvas.draw_text("Player", PLAYER_POS, PLAYER_SIZE,
                     PLAYER_COLOR)
    canvas.draw_text("Score: " + str(score), SCORE_POS,
                 SCORE_SIZE, SCORE_COLOR)
        
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# get things rolling
deal()
frame.start()

# remember to review the gradic rubric

